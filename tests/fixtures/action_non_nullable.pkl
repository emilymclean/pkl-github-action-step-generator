open module actions.checkout

import "package://github.com/emilymclean/pkl-github-actions/releases/download/v0.1.0-alpha.96/pkl-github-actions@0.1.0-alpha.96#/actions.pkl" as pklaction

hidden const ACTION_CALL = "actions/checkout@v4"
hidden const OUTPUT_REF = "ref"
hidden const OUTPUT_COMMIT = "commit"

/// Checkout
///
/// Checkout a Git repository at a particular version
class ActionInput {

    /// Repository name with owner. For example, actions/checkout
    repository: Any

    /// The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.
    ref: Any? = null

    /// Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT./// /// We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary./// /// [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    /// Default value if null is "${{ github.token }}"
    token: Any? = null

    /// SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key./// /// We recommend using a service account with the least permissions necessary./// /// [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    sshKey: Any? = null

    /// Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example, `ssh-keyscan github.com`. The public key for github.com is always implicitly added.
    sshKnownHosts: Any? = null

    /// Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes` and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to configure additional hosts.
    /// Default value if null is "True"
    sshStrict: Any? = null

    /// The user to use when connecting to the remote SSH host. By default 'git' is used.
    /// Default value if null is "git"
    sshUser: Any? = null

    /// Whether to configure the token or SSH key with the local git config
    /// Default value if null is "True"
    persistCredentials: Any? = null

    /// Relative path under $GITHUB_WORKSPACE to place the repository
    path: Any? = null

    /// Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching
    /// Default value if null is "True"
    clean: Any? = null

    /// Partially clone against a given filter. Overrides sparse-checkout if set.
    filter: Any? = null

    /// Do a sparse checkout on given patterns. Each pattern should be separated with new lines.
    sparseCheckout: Any? = null

    /// Specifies whether to use cone-mode when doing a sparse checkout.
    /// Default value if null is "True"
    sparseCheckoutConeMode: Any? = null

    /// Number of commits to fetch. 0 indicates all history for all branches and tags.
    /// Default value if null is "1"
    fetchDepth: Any? = null

    /// Whether to fetch tags, even if fetch-depth > 0.
    fetchTags: Any? = null

    /// Whether to show progress status output when fetching.
    /// Default value if null is "True"
    showProgress: Any? = null

    /// Whether to download Git-LFS files
    lfs: Any? = null

    /// Whether to checkout submodules: `true` to checkout submodules or `recursive` to recursively checkout submodules./// /// When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are converted to HTTPS.
    submodules: Any? = null

    /// Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory <path>`
    /// Default value if null is "True"
    setSafeDirectory: Any? = null

    /// The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com
    githubServerUrl: Any? = null

}

/// A "class as function", use this to construct a yaml or pkl-github-actions output.
/// To use, run `new Step { ... }.yaml`
class Step {
    id: String? = null
    name: String? = null
    `if`: String? = null
    env: Mapping<String, Any>? = null
    inputs: ActionInput

    fixed yaml = new {
        ["id"] = id
        ["name"] = name
        ["uses"] = ACTION_CALL
        ["if"] = `if`
        ["env"] = env
        ["with"] = new {
            ["repository"] = inputs.repository
            ["ref"] = inputs.ref
            ["token"] = inputs.token
            ["ssh-key"] = inputs.sshKey
            ["ssh-known-hosts"] = inputs.sshKnownHosts
            ["ssh-strict"] = inputs.sshStrict
            ["ssh-user"] = inputs.sshUser
            ["persist-credentials"] = inputs.persistCredentials
            ["path"] = inputs.path
            ["clean"] = inputs.clean
            ["filter"] = inputs.filter
            ["sparse-checkout"] = inputs.sparseCheckout
            ["sparse-checkout-cone-mode"] = inputs.sparseCheckoutConeMode
            ["fetch-depth"] = inputs.fetchDepth
            ["fetch-tags"] = inputs.fetchTags
            ["show-progress"] = inputs.showProgress
            ["lfs"] = inputs.lfs
            ["submodules"] = inputs.submodules
            ["set-safe-directory"] = inputs.setSafeDirectory
            ["github-server-url"] = inputs.githubServerUrl
        }
    }
    fixed github_actions = create_github_action(this)

}

/// A convenience function to get a yaml step. If you need parameters besides id, name, and inputs,
/// use the "class-as-function"
const function Step(_id: String?, _name: String?, _inputs: ActionInput) =
    Yaml(_id, _name, _inputs)

/// A convenience function to get a yaml step. If you need parameters besides id, name, and inputs,
/// use the "class-as-function"
const function Yaml(_id: String?, _name: String?, _inputs: ActionInput) =
    new Step {
        id = _id
        name = _name
        inputs = _inputs
    }.yaml

/// A convenience function to get a github_actions step. If you need parameters besides id, name, and inputs,
/// use the "class-as-function"
const function GithubAction(_id: String?, _name: String?, _inputs: ActionInput) =
    new Step {
        id = _id
        name = _name
        inputs = _inputs
    }.github_actions


/// Generates the syntax to access the "ref" output given the step ID
///
/// The branch, tag or SHA that was checked out
const function outputs_ref(id: String) =
    "steps.\(id).outputs.\(OUTPUT_REF)"

/// Generates the syntax to access the "commit" output given the step ID
///
/// The commit SHA that was checked out
const function outputs_commit(id: String) =
    "steps.\(id).outputs.\(OUTPUT_COMMIT)"


local const function create_github_action(step: Step) = new pklaction.ActionStep {
    id = step.id
    name = step.name
    `if` = step.`if`
    env = step.env
    uses = ACTION_CALL
    with = new Mapping {
        ["repository"] = step.inputs.repository
        ["ref"] = step.inputs.ref
        ["token"] = step.inputs.token
        ["ssh-key"] = step.inputs.sshKey
        ["ssh-known-hosts"] = step.inputs.sshKnownHosts
        ["ssh-strict"] = step.inputs.sshStrict
        ["ssh-user"] = step.inputs.sshUser
        ["persist-credentials"] = step.inputs.persistCredentials
        ["path"] = step.inputs.path
        ["clean"] = step.inputs.clean
        ["filter"] = step.inputs.filter
        ["sparse-checkout"] = step.inputs.sparseCheckout
        ["sparse-checkout-cone-mode"] = step.inputs.sparseCheckoutConeMode
        ["fetch-depth"] = step.inputs.fetchDepth
        ["fetch-tags"] = step.inputs.fetchTags
        ["show-progress"] = step.inputs.showProgress
        ["lfs"] = step.inputs.lfs
        ["submodules"] = step.inputs.submodules
        ["set-safe-directory"] = step.inputs.setSafeDirectory
        ["github-server-url"] = step.inputs.githubServerUrl
    }
}
